// vim: syntax=c

void trace_scene(inout Trace T, bool shadow_mode)
{
	T.idir = sign(T.wdir)/max(vec3(EPSILON), abs(T.wdir));

	// Trace to plane
	trace_plane(T, shadow_mode
		, vec3(0.0, 1.0, 0.0), -3.0
		, vec3(0.9, 0.9, 0.9)
		, vec3(0.1, 0.1, 0.1)
		);
	float plane_time = T.ttime;

	/*
	trace_plane(vec3(0.0, -1.0, 0.0), -143.0
		, vec3(0.9, 0.9, 0.9)
		, vec3(0.1, 0.1, 0.1)
		);
	*/

	float base_ttime = T.ttime;
	float base_pretime = 0.0;
	float old_ttime = T.ttime;

	// Discern boxness

	if(do_bbox)
	{
		vec3 hitmin = T.idir*(bmin-T.wpos);
		vec3 hitmax = T.idir*(bmax-T.wpos);
		//vec3 hitf = (hitmin+hitmax)/2.0 + sign(wdir)*(hitmin-hitmax)/2.0;
		//vec3 hitg = (hitmin+hitmax)/2.0 + sign(wdir)*(hitmax-hitmin)/2.0;
		vec3 hitf = min(hitmin, hitmax);
		vec3 hitg = max(hitmin, hitmax);

		float facf = max(hitf.x, max(hitf.y, hitf.z));
		float facg = min(hitg.x, min(hitg.y, hitg.z));

		// Eliminate if we don't enter the bounding box
		//if(false)
		//if(facf > facg || facf > ttime || facg < EPSILON)
		//if(facf > facg)
		//if(facf > facg || facg < EPSILON)
		if(facf > facg || facf > T.ttime || facg < EPSILON)
		{
			//ccol = vec3(1.0, 0.0, 0.0);
			T.tshine = 0.0;
			return;
		}

		base_ttime = min(T.ttime, facg);
		base_pretime = max(0.0, facf);
	}

	T.ttime = base_ttime;

	if(do_kdtree)
	{
		// Trace through kd-tree
		kd_trace_head = 0;
		kd_tmin = base_pretime;
		kd_tmax = T.ttime;
		kd_trace_node = 0U;
		float kd_old_ttime;

		for(uint i = 0U; i < KD_LOOKUP_MAX; i++)
		{
			// KD TRACE MODE

			if(kd_tmin > T.ttime) break;

			if(kd_tmin >= kd_tmax)
			{
				if(kd_fetch_plane(T))
					continue;
				else
					break;
			}

			// Load plane
			//vec4 k0 = fetch_data(16+0, kd_trace_node);
			//uint data = kd_data_split_axis[kd_trace_node];
			uint data = texelFetch(tex2, ivec2(0,kd_trace_node), 0).x;
			uint split_axis = data & 3U;

			//if(k0.a < 0.5)
			if(split_axis != 3U)
			{
				// Split node
				uint child1 = (data >> 2) & 0xFFFFU;
				//uint parent = data >> 20;

				//float split_point = kd_data_split_point[kd_trace_node];
				float split_point = texelFetch(tex1, ivec2(0,kd_trace_node), 0).x;

				// Determine axis {pos, dir}
				float cmp_pos;
				float cmp_idir;

				switch(split_axis)
				{
					case 0U:
						cmp_pos = T.wpos.x;
						cmp_idir = T.idir.x;
						break;

					case 1U:
						cmp_pos = T.wpos.y;
						cmp_idir = T.idir.y;
						break;

					default:
						cmp_pos = T.wpos.z;
						cmp_idir = T.idir.z;
						break;
				}

				/*
				vec3 sel_vec = kd_axis_select[split_axis];
				cmp_pos = dot(wpos, sel_vec);
				cmp_idir = dot(idir, sel_vec);
				*/

				// Get time
				float split_time = (split_point-cmp_pos)*cmp_idir;

				// Check if centre does get hit at all
				//bool use_cnear = (split_time >= kd_tmin);
				//bool use_cfar = (split_time <= kd_tmax);

				uvec2 kbase = uvec2(kd_trace_node+1U, child1);
				uvec2 kpair = (cmp_idir < 0.0 ? kbase.yx : kbase.xy);
				uint c0 = kpair.x;
				uint c1 = kpair.y;

				/*
				// ASSERT: Must advance through list!
				if(c0 <= kd_trace_node || c1 <= kd_trace_node)
				{
					ccol.r = 1.0;
					return;
				}

				// ASSERT: Must not overflow list!
				if(c0 >= 11 || c1 >= 11)
				{
					ccol.g = 1.0;
					return;
				}
				*/

				// DEBUG: Show plane passes
				//if(split_time >= kd_tmin && split_time <= kd_tmax) ccol.b += (1.0 - ccol.b)*0.4;
				if(do_debug) if(split_time >= kd_tmin && split_time <= kd_tmax) dcol.b += (1.0 - dcol.b)*0.3;
				// //if(use_cnear && use_cfar) ccol.b += (1.0 - ccol.b)*0.4;

				// Push furthest first - this is a stack!
				// We "tail-call" the stack anyway
				// so make sure BOTH are valid before pushing
				// Otherwise, just pick one

				// LEMMA: At least one is valid
				// PRECOND: kd_tmin < kd_tmax
				// PROOF:
				// split_time >= kd_tmin ==> use_cnear
				// split_time <= kd_tmax ==> use_cfar
				//
				// Assume both fail:
				// ==> kd_tmax < split_time < kd_tmin
				// ==> kd_tmax < kd_tmin
				// which violates the precondition.
				//
				// Therefore, at least one node is valid, QED.

				if(split_time <= kd_tmin)
				{
					kd_trace_node = c1;
					kd_tmin = max(split_time, kd_tmin);
				} else {
					if(!do_kd_restart && split_time < kd_tmax)
						kd_add_plane(c1, max(kd_tmin, split_time), kd_tmax);
					//kd_add_plane(c0, kd_tmin, min(split_time, kd_tmax));

					kd_trace_node = c0;
					kd_tmax = min(split_time, kd_tmax);
				}

			} else {
				// Leaf node
				//ivec2 k1 = ivec2(floor(k0.xy*255.0+0.4));
				uint spilen = (data >> 14) & 0x3FU;

				if(spilen > 0U)
				{
					kd_old_ttime = T.ttime;
					uint spibeg = (data >> 2) & 0xFFFU;

					// SPHERE TRACE MODE
					for(uint j = 0U; j < spilen; j++)
					{
						//int spi = int(floor(decode_float(fetch_data(48+0, k1.x+j))+0.1));
						//int spi = kd_data_spilist[spibeg+j];
						int spi = int(texelFetch(tex2, ivec2(1,spibeg+j), 0).r);
						//vec4 spd = sph_data[spi];
						vec4 spd = texelFetch(tex3, ivec2(spi,0), 0);
						vec3 spc = texelFetch(tex0, ivec2(0,spi), 0).rgb;

						trace_sphere(T, shadow_mode, spd.xyz, spd.w, spc.rgb);
					}

					if(T.ttime == kd_tmax)
						T.ttime = kd_old_ttime;

					if(T.ttime < kd_tmax) break;

					if(kd_fetch_plane(T))
						continue;
					else
						break;
				}
			}
		}
	} else {
		// Trace to spheres
		for(int i = 0; i < sph_count; i++)
		{
			//vec4 spd = sph_data[i];
			vec4 spd = texelFetch(tex3, ivec2(i,0), 0);
			vec3 spc = texelFetch(tex0, ivec2(0,i), 0).rgb;

			trace_sphere(T, shadow_mode, spd.xyz, spd.w, spc.rgb);

			if(shadow_mode && T.ttime < base_ttime) break;
		}
	}

	if(T.ttime >= base_ttime)
	{
		T.ttime = old_ttime;
	}

	if(plane_time == T.ttime)
		T.tshine = 0.0;
}

